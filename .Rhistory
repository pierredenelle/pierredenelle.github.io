# Packages needed
{
library("ggplot2") # plotting
library("sf") # spatial library
library("rnaturalearth") # shape files for countries and coastlines
library("rnaturalearthdata") # shape files for countries and coastlines
}
# Load data
world <- ne_coastline(scale = "medium", returnclass = "sf")
world_countries <- ne_countries(scale = "medium", returnclass = "sf")
# Fixing polygons crossing dateline
world <- st_wrap_dateline(world)
world_countries <- st_wrap_dateline(world_countries)
# Eckert IV projection
eckertIV <-
"+proj=eck4 +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
# Background box
xmin <- st_bbox(world)[["xmin"]]; xmax <- st_bbox(world)[["xmax"]]
ymin <- st_bbox(world)[["ymin"]]; ymax <- st_bbox(world)[["ymax"]]
bb <- sf::st_union(sf::st_make_grid(st_bbox(c(xmin = xmin,
xmax = xmax,
ymax = ymax,
ymin = ymin),
crs = st_crs(4326)),
n = 100))
# Equator line
equator <- st_linestring(matrix(c(-180, 0, 180, 0), ncol = 2, byrow = TRUE))
equator <- st_sfc(equator, crs = st_crs(world))
ggplot(world) +
geom_sf(data = bb, fill = "aliceblue") +
geom_sf(data = equator, color = "gray50", linetype = "dashed",
linewidth = 0.1) +
geom_sf(data = world_countries, fill = "antiquewhite1", color = NA) +
geom_sf(color = "gray50", linewidth = 0.1) +
geom_sf(data = bb, fill = NA)
ggplot(world) +
geom_sf(data = bb, fill = "aliceblue") +
geom_sf(data = equator, color = "gray50", linetype = "dashed",
linewidth = 0.1) +
geom_sf(data = world_countries, fill = "antiquewhite1", color = NA) +
geom_sf(color = "gray50", linewidth = 0.1) +
geom_sf(data = bb, fill = NA) +
coord_sf(crs = eckertIV)
ggplot(world) +
geom_sf(data = bb, fill = "aliceblue") +
geom_sf(data = equator, color = "gray50", linetype = "dashed",
linewidth = 0.1) +
geom_sf(data = world_countries, fill = "antiquewhite1", color = NA) +
geom_sf(color = "gray50", linewidth = 0.1) +
geom_sf(data = bb, fill = NA) +
coord_sf(crs = eckertIV) +
theme_void()
ggplot(world_countries) +
geom_sf()
ggplot(world) +
geom_sf()
#| include: false
ggplot2::ggsave(here::here("posts", "map_template", "plot_basis.png"),
plot = plot_basis, device = "png", dpi = "retina")
plot_basis <- ggplot(world) +
geom_sf(data = bb, fill = "aliceblue") +
geom_sf(data = equator, color = "gray50", linetype = "dashed",
linewidth = 0.1) +
geom_sf(data = world_countries, fill = "antiquewhite1", color = NA) +
geom_sf(color = "gray50", linewidth = 0.1) +
geom_sf(data = bb, fill = NA) +
coord_sf(crs = eckertIV) +
theme_void()
plot_basis
ggplot2::ggsave(here::here("posts", "map_template", "plot_basis.png"),
plot = plot_basis, device = "png", dpi = "retina")
library("tidyverse")
library("sf")
library("roughsf")
library("rnaturalearth") # shape files for countries and coastlines
library("rnaturalearthdata") # shape files for countries and coastlines
# Load data
world <- ne_coastline(scale = "medium", returnclass = "sf")
world_countries <- ne_countries(scale = "medium", returnclass = "sf")
#prep data
sc_sf <- st_cast(world, "POLYGON")
sc_sf$fill <- "dodgerblue"
sc_sf$colour <- "blue"
sc_sf$stroke <- 1
sc_sf$fillweight <- 0.5
sc_sf$fillstyle <- "dots"
#plot
p <- roughsf(sc_sf,
caption = "\nFrance",
caption_font = "56px Pristina",
roughness = 20,
bowing = 5,
width = 1800,
height = 1800)
p
save_roughsf(p, file = "france_rough.png")
library("tidyverse")
library("sf")
library("roughsf")
library("rnaturalearth") # shape files for countries and coastlines
library("rnaturalearthdata") # shape files for countries and coastlines
# Load data
world <- ne_coastline(scale = "medium", returnclass = "sf")
world_countries <- ne_countries(scale = "medium", returnclass = "sf")
# UK Map from https://geoportal.statistics.gov.uk/datasets/ons::countries-december-2021-uk-buc/explore?location=55.216238%2C-3.316413%2C6.38
france_shape <- GIFT::GIFT_shapes(entity_ID = 12066)
?roughsf
#prep data
sc_sf <- st_cast(world, "POLYGON")
sc_sf$fill <- "dodgerblue"
sc_sf$colour <- "blue"
sc_sf$stroke <- 1
sc_sf$fillweight <- 0.5
sc_sf$fillstyle <- "zigzag-line" # "hachure", "solid", "zigzag", "cross-hatch", "dots", "dashed", "zigzag-line"
#plot
p <- roughsf(sc_sf,
caption = "\nFrance",
caption_font = "56px Pristina",
roughness = 20,
bowing = 5,
width = 1800,
height = 1800)
p
#prep data
sc_sf <- st_cast(world_countries, "POLYGON")
sc_sf$fill <- "dodgerblue"
sc_sf$colour <- "blue"
sc_sf$stroke <- 1
sc_sf$fillweight <- 0.5
sc_sf$fillstyle <- "zigzag-line" # "hachure", "solid", "zigzag", "cross-hatch", "dots", "dashed", "zigzag-line"
#plot
p <- roughsf(sc_sf,
caption = "\nFrance",
caption_font = "56px Pristina",
roughness = 20,
bowing = 5,
width = 1800,
height = 1800)
p
#prep data
sc_sf <- st_cast(world_countries, "POLYGON")
sc_sf$fill <- "dodgerblue"
sc_sf$colour <- "blue"
sc_sf$stroke <- 1
sc_sf$fillweight <- 0.5
sc_sf$fillstyle <- "zigzag-line" # "hachure", "solid", "zigzag", "cross-hatch", "dots", "dashed", "zigzag-line"
#plot
p <- roughsf(sc_sf,
caption = "\nFrance",
caption_font = "56px Pristina",
roughness = 20,
bowing = 5,
width = 1800,
height = 1800)
#plot
p <- roughsf(sc_sf,
caption = "\World",
#plot
p <- roughsf(sc_sf,
caption = "\nWorld",
caption_font = "56px Pristina",
roughness = 20,
bowing = 5,
width = 1800,
height = 1800)
p
save_roughsf(p, file = "world_rough.png")
library("ggrough")
install.packages("ggrough")
devtools::install_github("xvrdm/ggrough")
# devtools::install_github("xvrdm/ggrough")
library("ggrough")
head(world_countries)
ggplot(world_countries) +
geom_sf(aes(fill = sovereignt))
ggplot(world_countries) +
geom_sf(aes(fill = sovereignt), show.legend = FALSE)
ggplot(world_countries) +
geom_sf(aes(fill = sovereignt), show.legend = FALSE) +
theme_void()
map_countries <- ggplot(world_countries) +
geom_sf(aes(fill = sovereignt), show.legend = FALSE) +
theme_void()
options <- list(GeomArea=list(fill_style="hachure",
angle_noise=0.5,
gap_noise=0.2,
gap=1.5,
fill_weight=1))
get_rough_chart(map_countries, options, family = "Schoolbell",
font_size_booster = 2.4)
options <- list(GeomSf=list(fill_style="hachure",
angle_noise=0.5,
gap_noise=0.2,
gap=1.5,
fill_weight=1))
get_rough_chart(map_countries, options, family = "Schoolbell",
font_size_booster = 2.4)
options <- list(GeomSf=list(fill_style="hachure",
angle_noise=0.5,
gap_noise=0.2,
gap=1.5,
fill_weight=1))
get_rough_chart(map_countries, options)
head(world)
map_countries <- ggplot(world_countries) +
geom_sf(aes(fill = sovereignt), show.legend = FALSE) +
theme_void()
options <- list(GeomSf=list(fill_style="hachure",
angle_noise=0.5,
gap_noise=0.2,
gap=1.5,
fill_weight=1))
get_rough_chart(map_countries, options)
map_countries <- ggplot(world_countries) +
geom_sf(aes(fill = sovereignt)) +
theme_void()
options <- list(GeomSf=list(fill_style="hachure",
angle_noise=0.5,
gap_noise=0.2,
gap=1.5,
fill_weight=1))
get_rough_chart(map_countries, options)
map_countries <- ggplot(world_countries) +
geom_sf(aes(fill = sovereignt)) +
theme_void() +
theme(legend.position = "none")
options <- list(GeomSf=list(fill_style="hachure",
angle_noise=0.5,
gap_noise=0.2,
gap=1.5,
fill_weight=1))
get_rough_chart(map_countries, options)
head(world_countries)
map_countries <- ggplot(world_countries) +
geom_sf(aes(fill = pop_est)) +
theme_void() # + theme(legend.position = "none")
options <- list(GeomSf=list(fill_style="hachure",
angle_noise=0.5,
gap_noise=0.2,
gap=1.5,
fill_weight=1))
get_rough_chart(map_countries, options)
map_countries
map_countries <- ggplot(world_countries) +
geom_sf(aes(fill = continent)) +
theme_void() # + theme(legend.position = "none")
map_countries
options <- list(GeomSf=list(fill_style="hachure",
angle_noise=0.5,
gap_noise=0.2,
gap=1.5,
fill_weight=1))
get_rough_chart(map_countries, options)
p2 <- get_rough_chart(map_countries, options)
save_roughsf(p2, file = "world_rough.png")
map_countries <- ggplot(world_countries) +
geom_sf(aes(fill = continent))# +
options <- list(GeomSf=list(fill_style="hachure",
angle_noise=0.5,
gap_noise=0.2,
gap=1.5,
fill_weight=1))
p2 <- get_rough_chart(map_countries, options)
p2
options <- list(GeomSf=list(fill_style="hachure",
angle=60,
angle_noise=1,
gap_noise=0,
gap=6,
fill_weight=2,
bowing=5,
roughness=30))
p2 <- get_rough_chart(map_countries, options)
p2
save_roughsf(p2, file = "world_rough.png")
library(ggOceanMaps)
install.packages("ggOceanMaps")
library(ggOceanMaps)
#limits are given longitude min/max, latitude min/max
basemap(limits = c(-30, 30, 50, 80),
bathymetry = TRUE,
glaciers = TRUE)
library(ggOceanMaps)
#limits are given longitude min/max, latitude min/max
basemap(limits = c(-180, 180, -90, 90),
bathymetry = TRUE,
glaciers = TRUE)
library(tidyverse)
library(osmdata)
library(sf)
library(cowplot)
#choose area
bbx <- getbb("Glasgow, UK")
#choose area
bbx <- getbb("Gottingen, Germany")
#large roads
highways <- bbx %>%
opq() %>%
add_osm_feature(
key = "highway",
value = c(
"motorway",
"trunk",
"primary",
"secondary",
"tertiary",
"motorway_link",
"trunk_link",
"primary_link",
"secondary_link",
"tertiary_link"
)
) %>%
osmdata_sf()
#small roads
streets <- bbx %>%
opq() %>%
add_osm_feature(
key = "highway",
value = c(
"residential",
"living_street",
"service",
"unclassified",
"pedestrian",
"footway",
"track",
"path"
)
) %>%
osmdata_sf()
#choose circle
crs2 <- 6384
center = c(long = 9.9351, lat = 51.5327)#c(long = -4.2518, lat = 55.8642)
center_proj <-
tibble(lat = center["lat"], long = center["long"]) %>%
st_as_sf(coords = c("long", "lat"), crs = 4326)
dist <-  3500
circle <- tibble(lat = center["lat"], long = center["long"]) %>%
st_as_sf(coords = c("long", "lat"), crs = 4326) %>%
st_transform(crs = crs2) %>%
st_buffer(dist = dist) %>%
st_transform(crs = 4326)
streets_lines <- st_intersection(circle, streets$osm_lines)
highways_lines <- st_intersection(circle, highways$osm_lines)
#Make plot
p <- ggplot() +
geom_sf(
data = streets_lines,
col = "gray40",
size = .4,
alpha = .65
) +
geom_sf(
data = highways_lines,
col = "gray35",
size = .6,
alpha = .8
) +
geom_sf(data = circle, color = "gray35", fill = NA) +
theme(plot.background = element_rect(fill = "gray15", color = NA),
panel.background = element_rect(fill = "gray15", colour="gray15"),
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(0.5, 0.5, 5, 0.5), "cm"), #top, right, bottom, left
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p
ggsave(p, filename="gottingen.jpg")
112/4
112+28
<td><a href="https://cran.r-project.org/package=funrar" target="_blank"><img src="http://www.r-pkg.org/badges/version/funrar" alt="funrar CRAN badge" /></a></td>
352/1120
ex=data.frame(tree = c(rep("beech", 3), c("spruce", 5)),
rich = c(10, 12, 15, 20, 22, 18, 24, 28))
ex=data.frame(tree = c(rep("beech", 3), c("spruce", 5)),
rich = c(10, 12, 15, 20, 22, 18, 24, 28, 32))
ex=data.frame(tree = c(rep("beech", 3), rep("spruce", 5)),
rich = c(10, 12, 15, 20, 22, 18, 24, 28))
ex
library(tidyverse)
library("ggplot2") # plotting
library("cowplot") # plotting
library("RColorBrewer") # color palette
library("sf") # spatial library
library("spData") # river network
library("maps") # borders of French departments
# Import Seine river
data("seine")
map("france", namesonly = TRUE, plot = FALSE) # get names of French departments
sm <- map("france", regions = "Seine-Maritime", fill = FALSE, col = "black",
plot = FALSE)
sm_sf <- st_as_sf(sm)
seine_sf <- st_as_sf(seine)
# Crop seine to Seine-Maritime department
seine_int <- seine_sf %>%
st_transform(crs = st_crs(sm_sf)) %>% # same CRS
st_intersection(sm_sf) # crop
sm_grid <- st_make_grid(sm_sf, cellsize = 0.05, what = "centers")
# Crop the grid to Seine-Maritime department
sm_grid_int <- st_intersection(sm_grid, sm_sf)
# Compute distance to Seine river
dist_seine <- st_distance(seine_int, sm_grid_int)
# Conversion to dataframe
dist_seine_df <- data.frame(dist_seine = as.vector(dist_seine)/1000,
st_coordinates(sm_grid_int))
plot_grid(
ggplot(sm_sf) +
geom_sf(fill = "white") +
geom_sf(data = seine, color = "dodgerblue"),
ggplot(sm_sf) +
geom_sf(fill = "white") +
geom_sf(data = seine_int, color = "dodgerblue"),
ggplot(sm_grid_int) +
geom_sf(),
ggplot(dist_seine_df, aes(X, Y, fill = dist_seine)) +
geom_tile() +
geom_sf(data = sm_sf, inherit.aes = FALSE, fill = NA, size = 1) +
geom_sf(data = seine_int, inherit.aes = FALSE, color = "white") +
scale_fill_gradientn(colours = rev(brewer.pal(9, "Blues"))) +
labs(fill = "Distance to water (km)") +
theme_void() +
theme(legend.position = "bottom"),
nrow = 2, rel_widths = rep(1, 4), rel_heights = rep(1, 4), align = "vh")
fr_departments <- map("france", fill = FALSE, col = "black", plot = FALSE)
fr_departments_sf <- st_as_sf(fr_departments)
seine_sf <- st_as_sf(seine)
seine_int <- seine_sf %>%
st_transform(crs = st_crs(fr_departments_sf)) %>% # same CRS
st_intersection(fr_departments_sf) # crop
sf_use_s2(FALSE)
seine_int <- seine_sf %>%
st_transform(crs = st_crs(fr_departments_sf)) %>% # same CRS
st_intersection(fr_departments_sf) # crop
fr_departments_grid <- st_make_grid(fr_departments_sf, cellsize = 0.5,
what = "centers")
fr_departments_grid_int <- st_intersection(fr_departments_grid,
st_buffer(fr_departments_sf, 0))
# Compute distance to Seine river
dist_seine <- st_distance(seine_int, fr_departments_grid_int)
# Only minimum distance
dist_seine <- apply(dist_seine, 2, min)
# RDS object saved: cellsize = 0.1 for the grid
# dist_seine <- readRDS("D:/PIERRE_DENELLE/Stackoverflow/world_dist_rivers.rds")
dist_seine_df <- data.frame(dist_seine = as.vector(dist_seine)/1000,
st_coordinates(fr_departments_grid_int))
plot_grid(
ggplot(fr_departments_sf) +
geom_sf(fill = "white") +
geom_sf(data = seine_int, color = "dodgerblue"),
NULL,
ggplot(fr_departments_grid_int) +
geom_sf(),
ggplot(dist_seine_df, aes(X, Y, fill = dist_seine)) +
geom_tile() +
geom_sf(data = fr_departments_sf, inherit.aes = FALSE, fill = NA, size = 1) +
geom_sf(data = seine_int, inherit.aes = FALSE, color = "white") +
scale_fill_gradientn(colours = rev(brewer.pal(9, "Blues"))) +
labs(fill = "Distance to water (km)") +
theme_void() +
theme(legend.position = "bottom"),
nrow = 2, rel_widths = rep(1, 4), rel_heights = rep(1, 4), align = "vh")
